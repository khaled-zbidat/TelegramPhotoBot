# GitHub Actions workflow for building and deploying Polybot to development environment
name: Polybot Build and Deploy Dev

# Trigger this workflow when code is pushed to the dev branch
on:
  push:
    branches:
     - dev

# Define jobs that will run in this workflow
jobs:
  # First job: Build Docker image and push to DockerHub
  Build:
    runs-on: ubuntu-latest  # Use Ubuntu runner for build process
    outputs:
      # Output the image name to pass to the deploy job
      image: ${{ steps.build-image.outputs.image }}
    steps:
     # Step 1: Checkout the repository code
     - uses: actions/checkout@v4
     
     # Step 2: Build and push Docker image to DockerHub
     - name: Build Docker image
       id: build-image  # Give this step an ID to reference its outputs
       env:
          # Set environment variables from GitHub secrets for Docker login
          DOCKER_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
       run: |
         # Login to DockerHub using credentials from secrets
         docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" -p "${{ secrets.DOCKERHUB_TOKEN }}"
         
         # Create image name with DockerHub username and build number tag
         img_name=${{ secrets.DOCKERHUB_USERNAME }}/polybot-dev:${{github.run_number}}
         # Create shorter image name for output (without username prefix)
         img_name1=/polybot-dev:${{github.run_number}}
         
         # Set output variable to pass image name to deploy job
         echo "image=$img_name1" >> $GITHUB_OUTPUT
          
         # Build Docker image and push to DockerHub registry
         docker build --push -t $img_name  .

  # Second job: Deploy the built image to EC2 development server
  Deploy:
    needs: Build  # This job depends on Build job completing successfully
    runs-on: ubuntu-latest  # Use Ubuntu runner for deployment
    
    # Set environment variables for repository information
    env:
      REPO_URL: ${{ github.server_url }}/${{ github.repository }}.git  # Git repository URL
      REPO_NAME: ${{ github.event.repository.name }}  # Repository name
    
    steps:
      # Step 1: Checkout repository code for deployment files
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Step 2: Configure SSH connection to EC2 instance
      - name: Configure SSH
        env:
          # Set environment variables from GitHub secrets
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}  # Private key for SSH authentication
          EC2_HOST: ${{ secrets.DEV_EC2_HOST }}  # EC2 instance hostname/IP (renamed from EC2_DEV_HOST)
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}  # Username for EC2 SSH connection
          TELEGRAM_TOKEN: ${{secrets.TELEGRAM_TOKEN}}  # Telegram bot token (renamed from TELEGRAM_TOKEN_DEV)
          YOLO_URL_DEV: ${{secrets.YOLO_URL_DEV}}  # YOLO service URL (renamed from YOLO_IP_DEV)
          S3_BUCKET_NAME: ${{secrets.S3_BUCKET_NAME}}  # S3 bucket name (renamed from AWS_S3_BUCKET_DEV)
        run: |
          # Create SSH directory if it doesn't exist
          mkdir -p ~/.ssh
          # Write private key to file for SSH authentication
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/private_key
          # Set proper permissions on private key file (read-only for owner)
          chmod 600 ~/.ssh/private_key
          # Create SSH config file with connection settings
          cat > ~/.ssh/config << EOF
          Host ec2
              HostName $EC2_HOST
              User $EC2_USERNAME
              IdentityFile ~/.ssh/private_key
              StrictHostKeyChecking no
          EOF
      
      # Step 3: Deploy application to EC2 instance
      - name: Execute deployment script on EC2
        run: |
          # Log the Docker image name being deployed
          echo "This is the image name :- ${{ needs.Build.outputs.image }}"
          
          # Generate .env file with environment variables for the application
          echo "IMG_NAME=khaled2infinity${{ needs.Build.outputs.image }}" > .env  # Docker image name (updated username)
          echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_TOKEN }}" >> .env  # Telegram bot authentication token
          echo "YOLO_IP=${{ secrets.YOLO_URL_DEV }}" >> .env  # YOLO service endpoint URL
          echo "AWS_S3_BUCKET=${{ secrets.S3_BUCKET_NAME }}" >> .env  # AWS S3 bucket for file storage
          echo "TYPE_ENV=dev" >> .env  # Environment type identifier
          
          # Copy configuration files to EC2 instance via SCP
          scp .env docker-compose.dev.yaml otelcol-config.yaml ec2:~/
          
          # SSH into EC2 instance and execute deployment commands
          ssh ec2 '
            # Update package manager repositories
            sudo apt-get update
            
            # Check if Docker is installed, install if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              # Update package repositories again
              sudo apt-get update
              # Install prerequisite packages for Docker installation
              sudo apt-get install -y ca-certificates curl
              # Create directory for Docker GPG key
              sudo install -m 0755 -d /etc/apt/keyrings
              # Download Docker GPG key for package verification
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              # Set proper permissions on GPG key
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              # Add Docker repository to apt sources (single line to avoid SSH escaping issues)
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo ${UBUNTU_CODENAME:-$VERSION_CODENAME}) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              # Update package repositories with Docker repo
              sudo apt-get update
              # Install Docker and related components
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            else
              # Docker already installed, skip installation
              echo "Docker already installed."
            fi
            
            # Verify Docker installation was successful
            if ! command -v docker &> /dev/null; then
              echo "Docker installation failed or not found. Exiting."
              exit 1
            fi
            
            # Start application deployment using Docker Compose
            echo "Starting Docker Compose services..."
            # Pull latest Docker images specified in compose file
            sudo docker compose -f docker-compose.dev.yaml pull
            # Start all services defined in compose file in detached mode
            sudo docker compose -f docker-compose.dev.yaml up -d
          '